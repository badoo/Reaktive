buildscript {
    ext.reaktive_version = '1.0.0-beta1'
    ext.reaktive_group_id = 'com.badoo.reaktive'

    repositories {
        google()
        jcenter()
    }
}

apply from: 'gradle/versions.gradle.kts'

allprojects {
    repositories {
        google()
        jcenter()
    }

    configurations.all {
        resolutionStrategy {
            force 'com.android.support:appcompat-v7:28.0.0'
            force 'com.android.support.constraint:constraint-layout:1.1.3'
            force 'io.reactivex.rxjava2:rxjava:2.2.7'
            force 'io.reactivex.rxjava2:rxandroid:2.1.1'
        }
    }
}

void setupMultiplatformLibrary(Project project) {
    project.apply plugin: 'org.jetbrains.kotlin.multiplatform'
    project.apply plugin: 'maven-publish'

    project.group = reaktive_group_id
    project.version = reaktive_version

    project.kotlin {
        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin('stdlib-common')
                }
            }

            commonTest {
                dependencies {
                    implementation kotlin('test')
                    implementation kotlin('test-common')
                    implementation kotlin('test-annotations-common')
                }
            }
        }
    }

    project.apply plugin: PublishPlugin
}

void setupAllTargetsWithDefaultSourceSets(Project project) {
    final target = Target.currentTarget()

    if (target.isCommon() || target.isMeta()) {
        setupCommonTargets(project)

        project.kotlin {
            sourceSets {
                jvmMain.dependsOn commonMain
                jvmTest.dependsOn commonTest

                androidMain.dependsOn commonMain
                androidTest.dependsOn commonTest

                jsMain.dependsOn commonMain
                jsTest.dependsOn commonTest

                linuxX64Main.dependsOn commonMain
                linuxX64Test.dependsOn commonTest

                linuxArm32HfpMain.dependsOn commonMain
                linuxArm32HfpTest.dependsOn commonTest
            }
        }
    }

    if (target.isIos() || target.isMeta()) {
        setupIosTargets(project)

        project.kotlin {
            sourceSets {
                ios32Main.dependsOn commonMain
                ios32Test.dependsOn commonTest

                ios64Main.dependsOn commonMain
                ios64Test.dependsOn commonTest

                iosSimMain.dependsOn commonMain
                iosSimTest.dependsOn commonTest
            }
        }
    }
}

void setupAndroidTarget(Project project) {
    project.apply plugin: 'com.android.library'

    project.android {
        buildToolsVersion '28.0.3'
        compileSdkVersion 28

        defaultConfig {
            minSdkVersion 1
        }
    }

    project.kotlin {
        targets.fromPreset(presets.android, 'android')

        sourceSets {
            androidMain {
                dependencies {
                    implementation kotlin('stdlib')
                }
            }

            androidTest {
                dependencies {
                    implementation kotlin('test-junit')
                }
            }
        }

        android {
            publishLibraryVariants('release', 'debug')
        }
    }
}

void setupJvmTarget(Project project) {
    project.kotlin {
        targets.fromPreset(presets.jvm, 'jvm')

        sourceSets {
            jvmMain {
                dependencies {
                    implementation kotlin('stdlib')
                }
            }

            jvmTest {
                dependencies {
                    implementation kotlin('test-junit')
                }
            }
        }
    }
}


void setupJsTarget(Project project) {
    project.apply plugin: JsPlugin
}

void setupLinuxTargets(Project project) {
    project.kotlin {
        targets {
            fromPreset(presets.linuxX64, 'linuxX64')
            fromPreset(presets.linuxArm32Hfp, 'linuxArm32Hfp')
        }
    }
}

void setupCommonTargets(Project project) {
    setupAndroidTarget(project)
    setupJvmTarget(project)
    setupJsTarget(project)
    setupLinuxTargets(project)
}

void setupIosTargets(Project project) {
    project.apply plugin: IosPlugin
}
