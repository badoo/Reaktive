buildscript {
    ext.reaktive_version = '1.0.2'
    ext.reaktive_group_id = 'com.badoo.reaktive'
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

void setupMultiplatformLibrary(Project project) {
    project.apply plugin: 'org.jetbrains.kotlin.multiplatform'
    project.apply plugin: 'maven-publish'
    project.apply plugin: DetektPlugin

    project.group = reaktive_group_id
    project.version = reaktive_version

    project.kotlin {
        sourceSets {
            commonMain {
                dependencies {
                    implementation Deps.kotlin.stdlib.common
                }
            }

            commonTest {
                dependencies {
                    implementation Deps.kotlin.test.common
                    implementation Deps.kotlin.test.annotationsCommon
                }
            }
        }
    }
}

void setupAllTargetsWithDefaultSourceSets(Map parameters) {
    setupAllTargetsWithDefaultSourceSets(
        parameters['project'],
        parameters.getOrDefault('isLinuxArm32HfpEnabled', true)
    )
}

void setupAllTargetsWithDefaultSourceSets(Project project, Boolean isLinuxArm32HfpEnabled = true) {
    final target = Target.currentTarget()

    if (target.isCommon() || target.isMeta()) {
        setupAndroidTarget(project)
        setupJvmTarget(project)
        setupJsTarget(project)
        setupLinuxX64Target(project)
        if (isLinuxArm32HfpEnabled) {
            setupLinuxArm32HfpTarget(project)
        }

        project.kotlin {
            sourceSets {
                jvmJsCommonMain.dependsOn commonMain
                jvmJsCommonTest.dependsOn commonTest

                jvmNativeCommonMain.dependsOn commonMain
                jvmNativeCommonTest.dependsOn commonTest

                jvmCommonMain.dependsOn jvmJsCommonMain
                jvmCommonMain.dependsOn jvmNativeCommonMain
                jvmCommonTest.dependsOn jvmJsCommonTest
                jvmCommonTest.dependsOn jvmNativeCommonTest

                jvmMain.dependsOn jvmCommonMain
                jvmTest.dependsOn jvmCommonTest

                androidMain.dependsOn jvmCommonMain
                androidTest.dependsOn jvmCommonTest

                jsMain.dependsOn jvmJsCommonMain
                jsTest.dependsOn jvmJsCommonTest

                nativeCommonMain.dependsOn jvmNativeCommonMain
                nativeCommonTest.dependsOn jvmNativeCommonTest

                linuxCommonMain.dependsOn nativeCommonMain
                linuxCommonTest.dependsOn nativeCommonTest

                linuxX64Main.dependsOn linuxCommonMain
                linuxX64Test.dependsOn linuxCommonTest

                if (isLinuxArm32HfpEnabled) {
                    linuxArm32HfpMain.dependsOn linuxCommonMain
                    linuxArm32HfpTest.dependsOn linuxCommonTest
                }
            }
        }
    }

    if (target.isIos() || target.isMeta()) {
        setupIosTargets(project)

        project.kotlin {
            sourceSets {
                jvmNativeCommonMain.dependsOn commonMain
                jvmNativeCommonTest.dependsOn commonTest

                nativeCommonMain.dependsOn jvmNativeCommonMain
                nativeCommonTest.dependsOn jvmNativeCommonTest

                iosCommonMain.dependsOn nativeCommonMain
                iosCommonTest.dependsOn nativeCommonTest

                ios32Main.dependsOn iosCommonMain
                ios32Test.dependsOn iosCommonTest

                ios64Main.dependsOn iosCommonMain
                ios64Test.dependsOn iosCommonTest

                iosSimMain.dependsOn iosCommonMain
                iosSimTest.dependsOn iosCommonTest
            }
        }
    }
}

private void setupAndroidTarget(Project project) {
    project.apply plugin: 'com.android.library'

    project.android {
        buildToolsVersion '28.0.3'
        compileSdkVersion 28

        defaultConfig {
            minSdkVersion 1
        }
    }

    project.kotlin {
        targets.fromPreset(presets.android, 'android')

        sourceSets {
            androidMain {
                dependencies {
                    implementation Deps.kotlin.stdlib
                }
            }

            androidTest {
                dependencies {
                    implementation Deps.kotlin.test.junit
                }
            }
        }

        android {
            publishLibraryVariants('release', 'debug')
        }
    }
}

private void setupJvmTarget(Project project) {
    project.kotlin {
        targets.fromPreset(presets.jvm, 'jvm')

        sourceSets {
            jvmMain {
                dependencies {
                    implementation Deps.kotlin.stdlib
                }
            }

            jvmTest {
                dependencies {
                    implementation Deps.kotlin.test.junit
                }
            }
        }
    }
}


private void setupJsTarget(Project project) {
    project.apply plugin: JsPlugin
}

private void setupLinuxX64Target(Project project) {
    project.kotlin {
        targets {
            fromPreset(presets.linuxX64, 'linuxX64')
        }
    }
}

private void setupLinuxArm32HfpTarget(Project project) {
    project.kotlin {
        targets {
            fromPreset(presets.linuxArm32Hfp, 'linuxArm32Hfp')
        }
    }
}

private void setupIosTargets(Project project) {
    project.apply plugin: IosPlugin
}

import tasks.BuildIosSampleTask

if (Target.currentTarget().isIos()) {
    tasks.register('buildIosSample', BuildIosSampleTask) {
        dependsOn ':sample-mpp-module:linkReleaseFrameworkIosSim'
    }
}
