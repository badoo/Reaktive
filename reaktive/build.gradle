plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id 'maven-publish'
}

group = reaktive_group_id
version = reaktive_version

kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
    }
}

apply from: '../target.gradle'
final target = currentTarget()

if (target.isCommon() || target.isMeta()) {
    apply plugin: 'com.android.library'

    android {
        buildToolsVersion '28.0.3'
        compileSdkVersion 28

        defaultConfig {
            minSdkVersion 1
        }
    }

    kotlin {
        targets {
            fromPreset(presets.jvm, 'jvm')
            fromPreset(presets.android, 'android')
            fromPreset(presets.js, 'js')
            fromPreset(presets.linuxX64, 'linuxX64')
        }

        sourceSets {
            jvmCommonMain {
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                }
            }

            jvmMain.dependsOn jvmCommonMain
            androidMain.dependsOn jvmCommonMain

            jsMain {
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                }

                compileKotlinJs {
                    kotlinOptions.metaInfo = true
                    kotlinOptions.sourceMap = true
                    kotlinOptions.verbose = true
                    kotlinOptions.main = 'call'
                    kotlinOptions.moduleKind = 'umd'
                }
            }

            jsTest {
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-test-js'
                }
            }

            nativeCommonMain.dependsOn commonMain
            nativeCommonTest.dependsOn commonTest

            linuxCommonMain.dependsOn nativeCommonMain
            linuxCommonTest.dependsOn nativeCommonTest
          
            linuxX64Main.dependsOn linuxCommonMain
            linuxX64Test.dependsOn linuxCommonTest
        }

        android {
            publishLibraryVariants('release', 'debug')
        }
    }
}

// target.isIos() || target.isMeta() when iOS is ready for publishing
if (target.isIos()) {
    kotlin {
        targets {
            fromPreset(presets.iosArm32, 'ios32') {
                binaries.framework()
            }
            fromPreset(presets.iosArm64, 'ios64') {
                binaries.framework()
            }
            fromPreset(presets.iosX64, 'iosSim') {
                binaries.framework()
            }
        }

        sourceSets {
            iosCommonMain.dependsOn nativeCommonMain
            iosCommonTest.dependsOn nativeCommonTest

            ios32Main.dependsOn iosCommonMain
            ios32Test.dependsOn iosCommonTest

            ios64Main.dependsOn iosCommonMain
            ios64Test.dependsOn iosCommonTest

            iosSimMain.dependsOn iosCommonMain
            iosSimTest.dependsOn iosCommonTest
        }
    }

    task iosTest(dependsOn: 'linkTestDebugExecutableIosSim') {
        group 'verification'
        doLast {
            final binary = kotlin.targets.iosSim.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
            exec {
                commandLine 'xcrun', 'simctl', 'spawn', 'iPhone X', binary.absolutePath
            }
        }
    }
    tasks.check.dependsOn iosTest
}

apply from: '../publication.gradle'
